import tkinter as tk
from tkinter import messagebox, simpledialog
import sqlite3
from datetime import datetime
import winsound

# Create database table 
conn = sqlite3.connect('alarms.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS alarms
             (id INTEGER PRIMARY KEY, time TEXT)''')
conn.commit()
conn.close()

# Function to update the current time label and check alarms
def update_time():
    current_time = datetime.now().strftime("%H:%M:%S")
    label_current_time.config(text=current_time)
    check_alarm()
    label_current_time.after(1000, update_time)  # Update time every second

# Function to add a new alarm to the database
def add_alarm():
    time = entry_time.get().strip()
    if not validate_time_format(time):
        messagebox.showerror("Error", "Please enter a valid time format (HH:MM).")
        return

    conn = sqlite3.connect('alarms.db')
    c = conn.cursor()
    c.execute("INSERT INTO alarms (time) VALUES (?)", (time,))
    conn.commit()
    conn.close()
    messagebox.showinfo("Success", "Alarm set successfully.")

# Function to validate time format (HH:MM)
def validate_time_format(time_str):
    try:
        datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False

# Function to show all alarms from the database
def show_alarms():
    conn = sqlite3.connect('alarms.db')
    c = conn.cursor()
    c.execute("SELECT * FROM alarms")
    alarms = c.fetchall()
    conn.close()
    
    if alarms:
        alarm_list = "\n".join([f"Alarm {i+1}: {alarm[1]}" for i, alarm in enumerate(alarms)])
        messagebox.showinfo("Alarms", alarm_list)
    else:
        messagebox.showinfo("Alarms", "No alarms set.")

# Function to delete alarms using a popup window
def delete_alarm():
    def delete_selected_alarms():
        selected_indices = [i for i, value in enumerate(alarm_checkboxes) if value.get()]
        if selected_indices:
            conn = sqlite3.connect('alarms.db')
            c = conn.cursor()
            c.execute("SELECT * FROM alarms")
            alarms = c.fetchall()
            remaining_alarms = [alarm for i, alarm in enumerate(alarms) if i not in selected_indices]
            c.execute("DELETE FROM alarms")
            c.executemany("INSERT INTO alarms (time) VALUES (?)", [(alarm[1],) for alarm in remaining_alarms])
            conn.commit()
            conn.close()
            messagebox.showinfo("Success", "Selected alarms deleted successfully.")
            popup.destroy()
            show_alarms()
        else:
            messagebox.showerror("Error", "No alarms selected.")

    popup = tk.Toplevel(root)
    popup.title("Delete Alarms")
    popup.geometry("300x200")

    label_title = tk.Label(popup, text="Select alarms to delete:", font=("Arial", 14, "bold"))
    label_title.pack(pady=10)

    conn = sqlite3.connect('alarms.db')
    c = conn.cursor()
    c.execute("SELECT * FROM alarms")
    alarms = c.fetchall()
    conn.close()

    global alarm_checkboxes
    alarm_checkboxes = []
    for alarm in alarms:
        var = tk.BooleanVar()
        var.set(False)
        alarm_checkboxes.append(var)
        checkbox = tk.Checkbutton(popup, text=alarm[1], variable=var, font=("Arial", 12))
        checkbox.pack(anchor="w", padx=10, pady=5)

    btn_delete = tk.Button(popup, text="Delete Selected Alarms", font=("Arial", 12), command=delete_selected_alarms)
    btn_delete.pack(pady=10)

# Function to check if it's time for an alarm
def check_alarm():
    current_time = datetime.now().strftime("%H:%M")
    conn = sqlite3.connect('alarms.db')
    c = conn.cursor()
    c.execute("SELECT * FROM alarms")
    alarms = c.fetchall()
    conn.close()

    for alarm in alarms:
        alarm_id, alarm_time = alarm
        if current_time == alarm_time:
            messagebox.showinfo("Alarm", "Alarm time reached!")
            play_alarm_sound()
            conn = sqlite3.connect('alarms.db')
            c = conn.cursor()
            c.execute("DELETE FROM alarms WHERE id=?", (alarm_id,))
            conn.commit()
            conn.close()
            return  # Stop checking for alarms after showing one

# Function to play alarm sound
def play_alarm_sound():
    # Replace 'annoying_alarm.wav' with the path to your annoying alarm sound file
    winsound.PlaySound(r'C:\Users\User\Downloads\Funny Minions Wake Up Alarm ðŸš¨ Ringtone ðŸŽ§ ï½œ Minions ï½œ Download Link In Description ï½œ JBRupner.wav', winsound.SND_FILENAME)

# Function to update the current time label and check alarms
def update_time():
    current_time = datetime.now().strftime("%H:%M:%S")
    label_current_time.config(text=current_time)
    check_alarm()
    label_current_time.after(1000, update_time)  # Update time every second

# Create the main window
root = tk.Tk()
root.title("Alarm Clock")
root.geometry("800x300")  # Set initial window size
root.configure(bg='#F4E04D')  # Set background color

# Load and resize alarm clock image
alarm_image = tk.PhotoImage(file=r"C:\Users\User\Downloads\â€”Pngtreeâ€”cartoon red black alarm clock_5861758.png")
alarm_image_resized = alarm_image.subsample(5, 5)  # Resize by a factor of 5

# Font style and size
font_style = ("Arial", 14)

# Create and place widgets
label_current_time = tk.Label(root, font=("Arial", 24), fg="blue", bg='#F4E04D')  # Updated background color
label_current_time.place(relx=0.7, rely=0.1)
update_time()  # Start updating current time and checking alarms

label_time = tk.Label(root, text="Enter alarm time (HH:MM):", font=font_style, bg='#F4E04D')  # Updated background color
label_time.place(relx=0.1, rely=0.4)

entry_time = tk.Entry(root, font=font_style, width=20)
entry_time.place(relx=0.1, rely=0.5)

button_add_alarm = tk.Button(root, text="Set Alarm", font=font_style, command=add_alarm, width=15, bg='#FF5733')  # Updated background color
button_add_alarm.place(relx=0.1, rely=0.6)

button_show_alarms = tk.Button(root, text="Show Alarms", font=font_style, command=show_alarms, width=15, bg='#FF5733')  # Updated background color
button_show_alarms.place(relx=0.1, rely=0.7)

button_delete_alarm = tk.Button(root, text="Delete Alarm", font=font_style, command=delete_alarm, width=15, bg='#FF5733')  # Updated background color
button_delete_alarm.place(relx=0.1, rely=0.8)

image_label = tk.Label(root, image=alarm_image_resized, bg='#F4E04D')  # Updated background color
image_label.place(relx=0.05, rely=0.1)

# Create database table
conn = sqlite3.connect('alarms.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS alarms
             (id INTEGER PRIMARY KEY, time TEXT)''')
conn.commit()
conn.close()

root.mainloop()
